% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clear-functions.R
\name{clear}
\alias{clear}
\alias{clear_all}
\alias{clear_class}
\alias{clear_except}
\alias{clear_except_class}
\alias{clear_fun}
\title{[!] Clear variables from workspace (current environment)}
\usage{
clear(..., list = NULL, except = NULL, all.names = FALSE,
  envir = parent.frame())

clear_all(..., list = NULL, except = NULL, all.names = TRUE,
  envir = parent.frame())

clear_except(..., list = NULL, all.names = FALSE, envir = parent.frame())

clear_class(clrClass = NULL, exceptVar = NULL, all.names = FALSE,
  envir = parent.frame())

clear_except_class(exceptClass = NULL, all.names = FALSE,
  envir = parent.frame())

clear_fun(all.names = TRUE, envir = parent.frame())
}
\arguments{
\item{...}{The objects as names (unquoted) or character strings (quoted).}

\item{list}{A character vector naming objects. Used instead of `\code{...}`.
If \code{list} is not \code{NULL}, dots `\code{...}` are ignored.}

\item{except, exceptVar}{Names of \bold{variables} (as a character vector)
\bold{to be kept} (to be cleared). Default is \code{NULL}.}

\item{all.names}{a logical value. If \code{TRUE} (default \emph{only}
in \code{clear_all} and \code{clear_fun}), all objects are cleared.
If \code{FALSE} (default in \code{clear}), objects which names begin
with a \code{.} are omitted.}

\item{envir}{The environment in which function takes action. Default is
the global environment \code{.GlobalEnv}.}

\item{clrClass}{Names of classes (as a character vector). Objects of
indicated classes to be removed.}

\item{exceptClass}{Names of classes (as a character vector) that
have \bold{not} to be cleared. Default is \code{NULL}.}
}
\description{
Remove items from the workspace, i.e. the current environment,
and free up system memory. Explanation in section \bold{"Details"}.
}
\details{
\code{clear} removes either listed or, if none is listed, all* not hidden
(that name does not begin with dot(\code{.})) variables.
Default is to clear all except hidden objects.\cr\cr
\code{clear_all} the same as \code{clear} just aditionally clears hidden
 variables (that name begins with dot (\code{.})).\cr\cr
\code{clear_except} clears variables except listed ones.\cr\cr
\code{clear_class} removes objects of indicated class(es), except those which
names provided in list \code{exceptVar}.\cr\cr
\code{clear_except_class} keeps objects of indicated class(es), others are
 cleared.\cr\cr
\code{clear_fun} removes \emph{all} (including hidden) items that are
  functions. \cr\cr

These functions are wrappers and extensions for \code{\link[base]{rm}}.\cr\cr
}
\examples{

clear()

  A <- 5
  B <- "s"
 D1 <- "string2"
 D2 <- "string3"
  L <- list(A,B)
FUN <- function(x) x
`\%in\%` <- `\%in\%`


ls()

clear_class("numeric")
ls()

clear_fun()
ls()

clear(except = c("D1", "D2"))
ls()

clear(except = c("B"))
ls()

clear()
ls()

numeric_1 <- 5
numeric_2 <- 5
numeric_3 <- 5
My_list <- list("a","A")
My_string <- "ABC"
ls()

clear_except_class(c("numeric", "list"))
ls()

clear_class("numeric", exceptVar = "numeric_1")
ls()


}
\author{
Vilmantas Gegzna
}
\seealso{
Remove objects from a specified environment \code{\link[base]{rm}},
         list objects \code{\link[base]{ls}}.

Other \pkg{spMisc} utilities: \code{\link{bru}},
  \code{\link{clc}}, \code{\link{fCap}}
}

